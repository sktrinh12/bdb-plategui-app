runApp()
runApp()
runApp()
y <- c(100,101,101,101,98,93,93,91)
x <- c(0,0.5,1,1.5,2,3,4,5)
lm(y ~ x)
ft <- lm(y ~ x)
summary(ft)
Slope(x,y)
mean(x)
mx <- mean(x)
my <- mean(y)
x-mx
sum(x-mx)
c_x <- c(c-mx)
c_x <- c(x-mx)
c_x
c_y <- c(y-mx)
c_x*c_y
sum(c_x*c_y)
c_x^2
sum(c_x^2)
sum(c_x*c_y)/sum(c_x^2)
c_y
my
my
y
y-my
cy <- c(y-my)
cy
sum(cx*cy)
c_x
sum(c_x*cy)
df
read_csv("C:\\Users\\10294643\\Downloads\\all_stats.csv")
read_csv("C:\\Users\\10294643\\Downloads\\all_stats.csv")$Concentration[339:346,]
read_csv("C:\\Users\\10294643\\Downloads\\all_stats.csv")$Concentration[339:346,]
read_csv("C:\\Users\\10294643\\Downloads\\all_stats.csv")$Concentration[339:346,]
read_csv("C:\\Users\\10294643\\Downloads\\all_stats.csv")
read_csv("C:\\Users\\10294643\\Downloads\\all_stats.csv")$ug.test[339:346,]
read_csv("C:\\Users\\10294643\\Downloads\\all_stats.csv")$ug.test[339:346]
read_csv("C:\\Users\\10294643\\Downloads\\all_stats (1).csv")$ug.test[339:346]
read_csv("C:\\Users\\10294643\\Downloads\\all_stats (1).csv")$Concentration[339:346]
read_csv("C:\\Users\\10294643\\Downloads\\all_stats (1).csv")$Concentration[338:345]
yy <- read_csv("C:\\Users\\10294643\\Downloads\\all_stats (1).csv")$Concentration[338:345]
yy
lm(yy ~ x)
runApp()
dev.off()
runApp()
runApp()
setwd("~/R/database-stats-template-shiny-app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/R/stability-regression-app-2/stability-regression-shiny-app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/R/database-stats-template-shiny-app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
#     if(!grepl(paste0("_", filenames_df$Well.ID[[row]],"_"), filenames_df$FCS.Filename[[row]], fixed=TRUE)){
#         filenames_df$Repeat[[row]] <- "YES"
#     }
#     else{
#         filenames_df$Repeat[[row]] <- "NO"
#     }
#
# }
# filenames_df <- filenames_df[filenames_df$Repeat == "NO",]
filenames_df$Image.Filename <- NA
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/R/plate-layout-metadata-shiny-app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
instructions_html.R
runApp()
sp <- "PBMC"
df <- tibble("sample_type" = c("PBMC, LWB"))
if(df$sample_type %in% sp)
)
if(df$sample_type %in% c(sp))
print(true)
if(sp %in% df$sample_type)
print(true)
df$sample_type %in% c(sp)
df$sample_type %in% c(sp)
sp %in% df$sample_type
grepl(sp, df$sample_type)
grepl(sp, df$sample_type, FIXED=FALSE)
grepl(sp, df$sample_type, fixed=FALSE)
grepl(sp, df$sample_type, fixed=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Configure excelR column names and types
excelR_df_colnames_type_LEGO <- data.frame(rbind(
c('Reagent #', 'text', 0),
c('Row', 'text', 0),
c("Ab Type", "dropdown",0),
c('Gating Control', 'dropdown',0),
c("Concentration (mg/ml)", "text", 0),
c("Concentration (ug/test)", "text", 0),
# c('Concentration', 'text',0),
# c('Units', 'dropdown',0),
excelR_df_colnames_type[3:12,],
c("Catalog # / Material #", "text", 0),
excelR_df_colnames_type[13:nrow(excelR_df_colnames_type),]
))
excelR_df_colnames_type <- data.frame(rbind(c('Row', 'text', 0),
c('Gating Control', 'dropdown',0),
# c('Experiment Type', 'text', 0),
c('Stability Time point', 'text',0),
# c('Gating Control', 'text', 0),
# optimal = rep(NA,8),
# optimal_units = rep(NA,8),
# bv421_SI = rep(NA,8),
# stability_time = rep(NA,8),
# gating_control = rep(NA,8),
# c('SKU', 'text', 0),
c('Target Species', 'dropdown', 0),
c('Specificity (CD)', 'text', 0),
c('Specificity (non-CD)', 'text', 0),
c('Host Species', 'dropdown', 0),
c('Isotype (Heavy Chain)', 'dropdown', 0),
c('Isotype (Light Chain)', 'dropdown', 0),
c('Clone', 'text', 0),
c('Fluorochrome', 'dropdown', 0),
# c('Parameter', 'text', 0),
c('Batch Number', 'text', 0),
c('spec1_name', 'dropdown', 0),
c('spec1_range', 'text', 0),
c('spec1: Pos or Neg?', 'dropdown', 0),
c('spec2_name', 'dropdown', 0),
c('spec2_range', 'text', 0),
c('spec2: Pos or Neg?', 'dropdown', 0),
c('spec3_name', 'dropdown', 0),
c('spec3_range', 'text', 0),
c('spec3: Pos or Neg?', 'dropdown', 0),
c('Gating Method', 'dropdown', 0),
c('Gating Argument', 'text', 0),
c('Optimal', 'text',0),
c('Optimal units', 'dropdown', 0),
c('BV421 Stain Index', 'text',0)
))
names(excelR_df_colnames_type) <- c('title', 'type', 'source')
excelR_df_colnames_type
## Configure excelR columns (title, type, and source of dropdowns)
excelR_columns = data.frame(title = excelR_df_colnames_type$title,
type = excelR_df_colnames_type$type,
source = I(list(0,
# 0,
rows,
# 0, #experiment_type
0, #stability_time_point
# 0, #gating_control
target_species_list, #target_species
0, #specificity_cd
0, #specificity_noncd
host_species_list, #host_species
iso_heavy_list, #isotype_heavy
iso_light_list,
0, #clone
fluorochrome, #fluorochrome
# 0, #parameter
0, #batch_number
spec_name_list, #spec1_name
0, #spec1_range
c('Positive','Negative', 'NA'), #spec1: pos or neg
spec_name_list, #spec2_name
0, #spec2_range
c('Positive','Negative', 'NA'), #spec2: pos or neg
spec_name_list, #spec3_name
0, #spec3_range
c('Positive','Negative', 'NA'), #spec3: pos or neg
gating_method_list,
0, #gating_argument
0, #optimal
c("NA", "ug/test", "ng/test", "mg/mL"), #optimal_units
0 #bv421_SI
)),
width = rep(100,dim(excelR_df_colnames_type)[1]))
excelR_columns
## Configure excelR column names and types
excelR_df_colnames_type_LEGO <- data.frame(rbind(
c('Reagent #', 'text', 0),
c('Row', 'text', 0),
c("Ab Type", "dropdown",0),
c('Gating Control', 'dropdown',0),
c("Concentration (mg/ml)", "text", 0),
c("Concentration (ug/test)", "text", 0),
# c('Concentration', 'text',0),
# c('Units', 'dropdown',0),
excelR_df_colnames_type[3:12,],
c("Catalog # / Material #", "text", 0),
excelR_df_colnames_type[13:nrow(excelR_df_colnames_type),]
))
excelR_df_colnames_type_LEGO_isotype <- data.frame(rbind(
c("Reagent #", "text", 0),
c('Row', 'text', 0),
c("Ab Type", "dropdown",0),
c("Clone", "dropdown",0),
c("Concentration (mg/ml)", "text",0),
c("Concentration (ug/test)", "text", 0),
c("Batch Number", "text", 0),
c("Catalog # / Material #", "text", 0)
# c('Concentration', 'text',0),
# c('Units', 'dropdown',0),
))
## Configure excelR column names and types
excelR_df_colnames_type_LEGO <- data.frame(rbind(
c('Reagent #', 'text', 0),
c('Row', 'text', 0),
c("Ab Type", "dropdown",0),
c('Gating Control', 'dropdown',0),
c("Concentration (mg/ml)", "text", 0),
c("Concentration (ug/test)", "text", 0),
# c('Concentration', 'text',0),
# c('Units', 'dropdown',0),
excelR_df_colnames_type[3:12,],
c("Catalog # / Material #", "text", 0),
excelR_df_colnames_type[13:nrow(excelR_df_colnames_type),]
), stringsAsFactors = FALSE)
excelR_df_colnames_type <- data.frame(rbind(c('Row', 'text', 0),
c('Gating Control', 'dropdown',0),
# c('Experiment Type', 'text', 0),
c('Stability Time point', 'text',0),
# c('Gating Control', 'text', 0),
# optimal = rep(NA,8),
# optimal_units = rep(NA,8),
# bv421_SI = rep(NA,8),
# stability_time = rep(NA,8),
# gating_control = rep(NA,8),
# c('SKU', 'text', 0),
c('Target Species', 'dropdown', 0),
c('Specificity (CD)', 'text', 0),
c('Specificity (non-CD)', 'text', 0),
c('Host Species', 'dropdown', 0),
c('Isotype (Heavy Chain)', 'dropdown', 0),
c('Isotype (Light Chain)', 'dropdown', 0),
c('Clone', 'text', 0),
c('Fluorochrome', 'dropdown', 0),
# c('Parameter', 'text', 0),
c('Batch Number', 'text', 0),
c('spec1_name', 'dropdown', 0),
c('spec1_range', 'text', 0),
c('spec1: Pos or Neg?', 'dropdown', 0),
c('spec2_name', 'dropdown', 0),
c('spec2_range', 'text', 0),
c('spec2: Pos or Neg?', 'dropdown', 0),
c('spec3_name', 'dropdown', 0),
c('spec3_range', 'text', 0),
c('spec3: Pos or Neg?', 'dropdown', 0),
c('Gating Method', 'dropdown', 0),
c('Gating Argument', 'text', 0),
c('Optimal', 'text',0),
c('Optimal units', 'dropdown', 0),
c('BV421 Stain Index', 'text',0)
), stringsAsFactors = FALSE)
names(excelR_df_colnames_type) <- c('title', 'type', 'source')
## Configure excelR columns (title, type, and source of dropdowns)
excelR_columns = data.frame(title = excelR_df_colnames_type$title,
type = excelR_df_colnames_type$type,
source = I(list(0,
# 0,
rows,
# 0, #experiment_type
0, #stability_time_point
# 0, #gating_control
target_species_list, #target_species
0, #specificity_cd
0, #specificity_noncd
host_species_list, #host_species
iso_heavy_list, #isotype_heavy
iso_light_list,
0, #clone
fluorochrome, #fluorochrome
# 0, #parameter
0, #batch_number
spec_name_list, #spec1_name
0, #spec1_range
c('Positive','Negative', 'NA'), #spec1: pos or neg
spec_name_list, #spec2_name
0, #spec2_range
c('Positive','Negative', 'NA'), #spec2: pos or neg
spec_name_list, #spec3_name
0, #spec3_range
c('Positive','Negative', 'NA'), #spec3: pos or neg
gating_method_list,
0, #gating_argument
0, #optimal
c("NA", "ug/test", "ng/test", "mg/mL"), #optimal_units
0 #bv421_SI
)),
width = rep(100,dim(excelR_df_colnames_type)[1]))
## Configure excelR column names and types
excelR_df_colnames_type_LEGO <- data.frame(rbind(
c('Reagent #', 'text', 0),
c('Row', 'text', 0),
c("Ab Type", "dropdown",0),
c('Gating Control', 'dropdown',0),
c("Concentration (mg/ml)", "text", 0),
c("Concentration (ug/test)", "text", 0),
# c('Concentration', 'text',0),
# c('Units', 'dropdown',0),
excelR_df_colnames_type[3:12,],
c("Catalog # / Material #", "text", 0),
excelR_df_colnames_type[13:nrow(excelR_df_colnames_type),]
), stringsAsFactors = FALSE)
names(excelR_df_colnames_type_LEGO) <- c('title', 'type', 'source')
print(excelR_df_colnames_type_LEGO)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
counties <- readRDS("C:/Users/10294643/Downloads/counties.rds")
counties
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
warnings()
0.03*2
*2
0.06*2
runApp()
setwd("~/R/census-app")
runApp('~/R/census-app')
runApp()
counties$total.pop
mean(counties$total.pop)
mean(na.omit(counties$total.pop))
runApp()
runApp()
runApp()
runApp()
counties[counties$total.pop > 101]
counties$total.pop
counties$total.pop[1]
typeof(counties$total.pop[1])
runApp()
runApp()
runApp()
runApp()
runApp()
iris[iris$Sepal.Length == 3]
iris$Sepal.Length
iris[iris$Sepal.Length >= 3]
iris[,iris$Sepal.Length >= 3]
iris[iris$Sepal.Length >= 3,]
runApp()
runApp()
runApp()
runApp()
counties
runApp()
runApp()
runApp()
runApp()
str <- "Percent White"
str_split(str)
str_split(str, "Percent ")
str_split(str, "Percent ")[2]
str_split(str, "Percent ")[,2]
str_split(str, "Percent ")[[2]]
str_split(str, "Percent ")[1]
str_split(str, "Percent ")[1][2]
str_split(str, "Percent ")[1][1]
str_split(str, "Percent ")[[1]][1]
str_split(str, "Percent ")[[1]][2]
str_split(str, "Percent ")
str_split(str, "Percent ")[[1]]
str_split(str, "Percent ")[[1]][1]
str_split(str, "Percent ")[[1]][2]
?pmax
str <- "white"
counties$str
colnames(counties) == "white"
counties[colnames(counties) == "white"]
head(counties[colnames(counties) == "white"])
pmax(counties[colnames(counties) == "white"], 1000)
pmax(counties[colnames(counties) == "white"], max)
pmax(counties[colnames(counties) == "white"], min)
pmax(counties$white, min)
runApp()
runApp()
counties$white
runApp()
data <- counties[colnames(counties) == "white"]
data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/plate-layout-metadata-shiny-app')
setwd("~/R/stability-regression-app-2/stability-regression-shiny-app")
runApp()
install.packages("gridtext")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/R/plate-layout-metadata-shiny-app")
runApp()
